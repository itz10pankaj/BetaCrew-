const net = require('net');

// Function to connect to the BetaCrew server
function connectToServer(hostname, port) {
    const client = new net.Socket();
    let receivedSequences = new Set(); // Track received packet sequences

    client.connect(port, hostname, () => {
        console.log('Connected to BetaCrew server');
        // Send a request to stream all packets
        sendRequest(client, 1);
    });

    client.on('data', (data) => {
        // Handle incoming data
        handleResponse(data, receivedSequences);
    });

    client.on('close', () => {
        console.log('Connection closed');
        // I-am-autogenerated: Check for missing sequences and request them
        requestMissingSequences(client, receivedSequences);
    });

    client.on('error', (err) => {
        console.error('Connection error:', err);
    });

    return client;
}

// Function to send a request to the server
function sendRequest(client, callType, resendSeq = 0) {
    const buffer = Buffer.alloc(2);
    buffer.writeUInt8(callType, 0); // callType: 1 for Stream All Packets, 2 for Resend Packet
    buffer.writeUInt8(resendSeq, 1); // resendSeq: only used if callType is 2

    client.write(buffer);
}

// Function to handle the response from the server
function handleResponse(data, receivedSequences) {
    // Parse the response data
    let offset = 0;
    while (offset < data.length) {
        const symbol = data.toString('ascii', offset, offset + 4);
        offset += 4;
        const buySellIndicator = data.toString('ascii', offset, offset + 1);
        offset += 1;
        const quantity = data.readInt32BE(offset);
        offset += 4;
        const price = data.readInt32BE(offset);
        offset += 4;
        const packetSequence = data.readInt32BE(offset);
        offset += 4;

        console.log(`Symbol: ${symbol}, Buy/Sell: ${buySellIndicator}, Quantity: ${quantity}, Price: ${price}, Sequence: ${packetSequence}`);
        receivedSequences.add(packetSequence); // Track received sequence
    }
}

// I-am-autogenerated: Function to request missing sequences
function requestMissingSequences(client, receivedSequences) {
    const maxSequence = Math.max(...receivedSequences);
    for (let seq = 1; seq < maxSequence; seq++) {
        if (!receivedSequences.has(seq)) {
            console.log(`Requesting missing sequence: ${seq}`);
            sendRequest(client, 2, seq);
        }
    }
}

// Example usage
const hostname = 'your.server.hostname'; // Replace with actual hostname
const port = 3000; // Port number as specified
const client = connectToServer(hostname, port);